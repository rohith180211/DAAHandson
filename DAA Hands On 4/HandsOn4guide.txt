Hands-On 4
Problem 0

Implement the Fibonacci sequence

x = fib(n)

    if n == 0

        return 0

    if n == 1

         return 1

    return fib(n-1) + fib(n-2)

Debug the code and "step into" the function for fib(5). I want you to step into all recursive calls and list out the the function call stack ex. fib(5) -> fib(4) -> fib(3) ?....  that you observe.

Note, don't turn on optimization if your programming language allows it.

Another note make sure to implement the return exactly as

return fib(n-1) + fib(n-2) instead of say

a = fib(n-1)

b = fib(n-2)

return a + b

OR as

return fib(n-2) + fib(n-1)

The reason is, I want everyone to have similar results.

 

For the following two problems:

1. Implement the solutions and upload it to github 
Solution : Problem0.py
2. Prove the time complexity of the algorithms
Solution: Using this recursive method, each fib(n) call for the Fibonacci sequence generates two more recursive calls, resulting in a binary tree with depth n.
Because the number of calls in each level of the recursion tree roughly doubles, the time complexity is O(2^n).
3. Comment on way's you could improve your implementation (you don't need to do it just discuss it)
One way to improve this implementation is to use memoization or dynamic programming, which would reduce the time complexity to O(n). Instead of recalculating the same Fibonacci values multiple times 
we can store the results of previous computations and reuse them.\


Problem 1
    Given K sorted arrays of size N each, the task is to merge them all maintaining their sorted order.

    Examples:

    Input: K = 3, N =  4
    array1 = [1,3,5,7]
    array2 = [2,4,6,8]
    array3 = [0,9,10,11]
    Output: [0,1,2,3,4,5,6,7,8,9,10,11]
    Merged array in a sorted order where every element is greater than the previous element.

    Input: K = 3, N =  3
    array1 = [1,3,7]
    array2 = [2,4,8]
    array3 = [9,10,11]
    Output: [1,2,3,4,7,8,9,10,11]
    Merged array in a sorted order where every element is greater than the previous element.

    Solution: Problem1.py
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    [1, 2, 3, 4, 7, 8, 9, 10, 11]

Problem 2
    Given a sorted array of size N, the task is to remove the duplicate elements from the array.

    Examples:

    Input: array = [2, 2, 2, 2, 2]
    Output: array= [2]
    Explanation: All the elements are 2, So only keep one instance of 2.

    Input: array = [1, 2, 2, 3, 4, 4, 4, 5, 5]
    Output: array[] = {1, 2, 3, 4, 5}

    Note, you can't use something like the set container in C++.
    Solution: Problem2.py
    [2]
    [1, 2, 3, 4, 5]
